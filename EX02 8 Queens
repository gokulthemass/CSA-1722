def is_safe(board, row, col):
    # Check for queens in the same column
    for i in range(row):
        if board[i] == col:
            return False
    
    # Check for queens in the upper left diagonal
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i] == j:
            return False
    
    # Check for queens in the upper right diagonal
    for i, j in zip(range(row-1, -1, -1), range(col+1, len(board))):
        if board[i] == j:
            return False
    
    return True

def solve_queens(board, row):
    if row >= len(board):
        return True
    
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens(board, row+1):
                return True
            board[row] = -1
    
    return False

def print_solution(board):
    for row in board:
        line = ['Q' if i == row else '.' for i in range(len(board))]
        print(" ".join(line))

def solve_8_queens():
    board = [-1] * 8
    if solve_queens(board, 0):
        print("Solution:")
        print_solution(board)
    else:
        print("No solution exists.")

solve_8_queens()
